<?php

namespace Sevenpluss\TwitchApi\Contracts;

use Exception;
use GuzzleHttp\Exception\GuzzleException;
use Psr\Http\Message\StreamInterface;
use Sevenpluss\TwitchApi\Exceptions\ClientIdMissingException;
use Sevenpluss\TwitchApi\Exceptions\ClientSecretMissingException;
use Sevenpluss\TwitchApi\Exceptions\TokenMissingException;
use Sevenpluss\TwitchApi\Exceptions\UriMissingException;

/**
 * Interface ApiRequest
 *
 * @package Sevenpluss\TwitchApi\Contracts
 */
interface ApiRequest
{
    /**
     * @param TwitchApiContract $twitch
     *
     * @return ApiRequest
     */
    public function setApiMediator(TwitchApiContract $twitch): ApiRequest;

    /**
     * Set Twitch OAuth Token
     *
     * @param string|null $token OAuth token
     *
     * @return void
     */
    public function setToken(string $token = null): void;

    /**
     * Set Twitch OAuth Token for one request
     *
     * @param string $token OAuth token
     *
     * @return ApiRequest
     */
    public function withToken(string $token): ApiRequest;

    /**
     * Get Twitch token
     *
     * @return string Twitch token
     * @throws TokenMissingException
     */
    public function getToken(): string;

    /**
     * Refresh the user token
     *
     * @link  https://dev.twitch.tv/docs/authentication/#refreshing-access-tokens
     *
     * @param string $refresh_token
     * @param array $scopes
     *
     * @return ResultContract|null
     * @throws GuzzleException
     * @throws ClientIdMissingException
     * @throws ClientSecretMissingException
     * @throws TokenMissingException
     */
    public function refreshToken(string $refresh_token, array $scopes = []): ?ResultContract;

    /**
     * Revoke user token
     *
     * @link   https://dev.twitch.tv/docs/authentication/#revoking-access-tokens
     * @return ResultContract
     * @throws GuzzleException
     * @throws ClientIdMissingException
     * @throws TokenMissingException
     */
    public function revokeToken(): ResultContract;

    /**
     * Get auth user token
     *
     * @param string $code
     *
     * @return ResultContract
     * @throws ClientIdMissingException
     * @throws ClientSecretMissingException
     * @throws GuzzleException
     * @throws TokenMissingException
     * @throws UriMissingException
     */
    public function getAuthToken(string $code): ResultContract;

    /**
     * Your unique token, generated by your application, used to avoid CSRF attacks
     *
     * @return string
     * @throws Exception
     */
    public function getState(): string;

    /**
     * Get the authentication Url
     *
     * @link  https://dev.twitch.tv/docs/authentication/getting-tokens-oauth/#oauth-implicit-code-flow
     *
     * @param string $state
     * @param array $scopes the needed scopes
     * @param bool $force_login force verification
     *
     * @return string           the url to redirect
     * @throws Exception
     */
    public function getAuthUri(string $state, array $scopes = [], bool $force_login = false): string;

    /**
     * @param string $path
     * @param array $options
     * @param PaginatorContract $paginator
     *
     * @return ResultContract
     * @throws ClientIdMissingException
     * @throws TokenMissingException
     * @throws GuzzleException
     */
    public function get(string $path = '', array $options = [], PaginatorContract $paginator = null): ResultContract;

    /**
     * @param string $path
     * @param array $options
     * @param PaginatorContract $paginator
     *
     * @return ResultContract
     * @throws ClientIdMissingException
     * @throws TokenMissingException
     * @throws GuzzleException
     */
    public function post(string $path = '', array $options = [], PaginatorContract $paginator = null): ResultContract;

    /**
     * @param string $path
     * @param array $options
     *
     * @return ResultContract
     * @throws ClientIdMissingException
     * @throws TokenMissingException
     * @throws GuzzleException
     */
    public function put(string $path = '', array $options = []): ResultContract;

    /**
     * @param string $method
     * @param string $path
     * @param array|null $body
     *
     * @return ResultContract
     * @throws ClientIdMissingException
     * @throws GuzzleException
     * @throws TokenMissingException
     */
    public function json(string $method, string $path = '', array $body = null): ResultContract;

    /**
     * Execute query
     *
     * @param string $method HTTP method
     * @param string $path Query path
     * @param array $options Query parameters
     * @param PaginatorContract $paginator
     * @param string|resource|StreamInterface|null $json_body Request json body
     *
     * @return ResultContract
     * @throws ClientIdMissingException
     * @throws TokenMissingException
     * @throws GuzzleException
     */
    public function query(string $method = 'GET', string $path = '', array $options = [], PaginatorContract $paginator = null, $json_body = null): ResultContract;
}
